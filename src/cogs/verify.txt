from discord.ext import commands
import secrets
import re
import logging
from datetime import datetime
import asyncio


class EmailVerification(commands.Cog):
    def __init__(self, bot):
        self.pending_verifications = {}
        self.verified_users_file = "verified_users.json"

    async def is_verified(self, user_id: int) -> bool:
        verified_users = await self.load_verified_users()
        return str(user_id) in verified_users

    async def load_verified_users(self) -> dict:
        try:
            async with aiofiles.open(self.verified_users_file, 'r') as f:
                content = await f.read()
                return json.loads(content) if content else {}
        except FileNotFoundError:
            return {}

    async def save_verified_user(self, user_id: int, email_hash: str) -> None:
        verified_users = await self.load_verified_users()
        verified_users[str(user_id)] = email_hash
        
        async with aiofiles.open(self.verified_users_file, 'w') as f:
            await f.write(json.dumps(verified_users))

    async def get_log_channel(self):
        if self.log_channel is None:
            for guild in self.bot.guilds:
                channel = discord.utils.get(guild.channels, name=LOG_CHANNEL_NAME)
                if channel:
                    self.log_channel = channel
                    break
        return self.log_channel

    async def log_to_channel(self, embed: discord.Embed):
        channel = await self.get_log_channel()
        if channel is None:
            logger.error(f"Could not find channel named {LOG_CHANNEL_NAME}")
            return

        try:
            await channel.send(embed=embed)
        except Exception as e:
            logger.error(f"Failed to send log message: {e}")

    async def remove_verification_timeout(self, user_id: int, expired: bool = False):
        if user_id in self.pending_verifications:
            verification = self.pending_verifications[user_id]
            del self.pending_verifications[user_id]
            
            if expired:
                try:
                    user = await self.bot.fetch_user(user_id)
                    if user:
                        await user.send("Dein Verifizierungscode ist abgelaufen. Bitte benutze `>verify <email>` um einen neuen Code anzufordern.")
                        
                        await self.log_to_channel(self.create_log_embed(
                            "Verification Expired",
                            "Verification code expired after 5 minutes",
                            discord.Color.orange(),
                            [
                                ("User", f"{user} ({user.id})", True),
                                ("Email", verification['email'], True)
                            ]
                        ))
                except Exception as e:
                    logger.error(f"Failed to notify user of expired verification: {e}")

    @commands.dm_only()
    @commands.command(name="verify")
    async def verify_email(self, ctx, email: str | None = None):
        if not email:
            await self.log_to_channel(self.create_log_embed(
                "Verification Attempt - No Email",
                "User tried to verify without providing email",
                discord.Color.yellow(),
                [("User", f"{ctx.author} ({ctx.author.id})", True)]
            ))
            return await ctx.send("Bitte gib deine E-Mail-Adresse an.\n"
                                "Beispiel: `>verify foobar@thu.de`")

        if await self.is_verified(ctx.author.id):
            await self.log_to_channel(self.create_log_embed(
                "Verification Attempt - Already Verified",
                f"User tried to verify again",
                discord.Color.yellow(),
                [
                    ("User", f"{ctx.author} ({ctx.author.id})", True),
                    ("Email", email, True)
                ]
            ))
            return await ctx.send("Du bist bereits verifiziert!")

        is_valid, message = self.is_valid_student_email(email)
        if not is_valid:
            await self.log_to_channel(self.create_log_embed(
                "Verification Attempt - Invalid Email",
                message,
                discord.Color.red(),
                [
                    ("User", f"{ctx.author} ({ctx.author.id})", True),
                    ("Email", email, True),
                    ("Reason", message, False)
                ]
            ))
            return await ctx.send("Ungültige E-Mail-Adresse. Bitte verwende deine THU-E-Mail-Adresse.")

        await ctx.send("Sende Verifizierungscode... Dies kann einen Moment dauern.")
        verification_code = secrets.token_hex(3).upper()
        
        try:
            self.pending_verifications[ctx.author.id] = {
                'email': email,
                'code': verification_code,
                'attempts': 0,
                'created_at': datetime.now()
            }
            
            self.send_verification_email(email, verification_code, str(ctx.author))
            
            async def timeout_verification():
                await asyncio.sleep(self.verification_timeout)
                await self.remove_verification_timeout(ctx.author.id, expired=True)
            
            asyncio.create_task(timeout_verification())
            
            await self.log_to_channel(self.create_log_embed(
                "Verification Code Sent",
                "Verification email sent successfully",
                discord.Color.blue(),
                [
                    ("User", f"{ctx.author} ({ctx.author.id})", True),
                    ("Email", email, True)
                ]
            ))
            
            await ctx.send("✅ Verifizierungscode wurde gesendet!\n"
                         "Bitte überprüfe deine Universitäts-E-Mail für den Verifizierungscode.\n"
                         "Benutze `>confirm <code>` um die Verifizierung abzuschließen.\n"
                         "Der Code läuft in 5 Minuten ab.")
            
        except Exception as e:
            await self.log_to_channel(self.create_log_embed(
                "Verification Error",
                str(e),
                discord.Color.red(),
                [
                    ("User", f"{ctx.author} ({ctx.author.id})", True),
                    ("Email", email, True),
                    ("Error", str(e), False)
                ]
            ))
            if ctx.author.id in self.pending_verifications:
                del self.pending_verifications[ctx.author.id]
            await ctx.send("Es gab einen Fehler beim Senden der Verifizierungs-E-Mail.")


    async def confirm_help(self, ctx):
        await ctx.send(self.confirm_help.help)

    @commands.dm_only()
    @commands.command(name="confirm")
    async def confirm_email(self, ctx, code: str):
        if not ctx.author.id in self.pending_verifications:
            await self.log_to_channel(self.create_log_embed(
                "Confirmation Attempt - No Pending Verification",
                "User tried to confirm without pending verification",
                discord.Color.yellow(),
                [("User", f"{ctx.author} ({ctx.author.id})", True)]
            ))
            return await ctx.send("Keine ausstehende Verifizierung. Bitte benutze `>verify <deine.universitaets.email>` zuerst.")
        
        verification = self.pending_verifications[ctx.author.id]
        
        time_elapsed = (datetime.now() - verification['created_at']).total_seconds()
        if time_elapsed > self.verification_timeout:
            await self.remove_verification_timeout(ctx.author.id, expired=True)
            return await ctx.send("Dein Verifizierungscode ist abgelaufen. Bitte benutze `>verify <email>` um einen neuen Code anzufordern.")
        
        if verification['attempts'] >= 3:
            await self.log_to_channel(self.create_log_embed(
                "Verification Failed - Max Attempts",
                "User exceeded maximum verification attempts",
                discord.Color.red(),
                [
                    ("User", f"{ctx.author} ({ctx.author.id})", True),
                    ("Email", verification['email'], True)
                ]
            ))
            del self.pending_verifications[ctx.author.id]
            return await ctx.send("Zu viele Versuche. Bitte starte erneut mit `>verify <email>`")
        
        if code.upper() != verification['code']:
            verification['attempts'] += 1
            await self.log_to_channel(self.create_log_embed(
                "Invalid Verification Code",
                f"Attempt {verification['attempts']}/3",
                discord.Color.orange(),
                [
                    ("User", f"{ctx.author} ({ctx.author.id})", True),
                    ("Email", verification['email'], True),
                    ("Provided Code", code.upper(), True),
                    ("Expected Code", verification['code'], True)
                ]
            ))
            return await ctx.send(f"Ungültiger Code. Noch {3 - verification['attempts']} Versuche übrig.")
        
        email_hash = hashlib.sha256(verification['email'].encode()).hexdigest()
        await self.save_verified_user(ctx.author.id, email_hash)
        
        try:
            guild = ctx.bot.get_guild(int(os.getenv('GUILD_ID')))
            if guild:
                member = await guild.fetch_member(ctx.author.id)
                if member:
                    verified_role = discord.utils.get(guild.roles, name="Verified")
                    if verified_role:
                        await member.add_roles(verified_role)
                        await self.log_to_channel(self.create_log_embed(
                            "Verification Successful",
                            "User verified and role assigned",
                            discord.Color.green(),
                            [
                                ("User", f"{ctx.author} ({ctx.author.id})", True),
                                ("Email", verification['email'], True)
                            ]
                        ))
                    else:
                        await self.log_to_channel(self.create_log_embed(
                            "Role Assignment Failed",
                            "Verified role not found",
                            discord.Color.red(),
                            [("User", f"{ctx.author} ({ctx.author.id})", True)]
                        ))
        except Exception as e:
            await self.log_to_channel(self.create_log_embed(
                "Role Assignment Error",
                str(e),
                discord.Color.red(),
                [
                    ("User", f"{ctx.author} ({ctx.author.id})", True),
                    ("Error", str(e), False)
                ]
            ))

        del self.pending_verifications[ctx.author.id]
        await ctx.send("E-Mail erfolgreich verifiziert! Dir wurde die Verified-Rolle zugewiesen.")


 

    @commands.has_permissions(administrator=True)
    @commands.command(name="remove_verify")
    async def remove_verify(self, ctx, member: discord.Member):
        verified_users = await self.load_verified_users()
        if str(member.id) in verified_users:
            del verified_users[str(member.id)]
            async with aiofiles.open(self.verified_users_file, 'w') as f:
                await f.write(json.dumps(verified_users))
            
            verified_role = discord.utils.get(ctx.guild.roles, name="Verified")
            if verified_role in member.roles:
                await member.remove_roles(verified_role)
            
            await self.log_to_channel(self.create_log_embed(
                "Verification Removed",
                "Admin removed user verification",
                discord.Color.orange(),
                [
                    ("User", f"{member} ({member.id})", True),
                    ("Admin", f"{ctx.author} ({ctx.author.id})", True)
                ]
            ))
            await ctx.send(f"Verifizierung von {member} wurde entfernt.")
        else:
            await ctx.send(f"{member} ist nicht verifiziert.")

async def setup(bot):
    await bot.add_cog(EmailVerification(bot))
